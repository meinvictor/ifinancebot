import telebot
import json
import os
from telebot import types
from dotenv import load_dotenv
from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.triggers.cron import CronTrigger
from datetime import datetime
import pytz

load_dotenv()
TOKEN = os.getenv("TOKEN")
bot = telebot.TeleBot(TOKEN)

DATA_FILE = 'expenses.json'
expenses = {}

def load_expenses():
    global expenses
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, 'r') as f:
            expenses = json.load(f)

def save_expenses():
    with open(DATA_FILE, 'w') as f:
        json.dump(expenses, f)

load_expenses()

@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row("‚ûï –î–æ–¥–∞—Ç–∏ –≤–∏—Ç—Ä–∞—Ç—É", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üí∞ –ë–∞–ª–∞–Ω—Å")
    markup.row("üìã –í—Å—ñ –≤–∏—Ç—Ä–∞—Ç–∏", "‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏", "‚ùå –í–∏–¥–∞–ª–∏—Ç–∏")
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤—ñ—Ç! –¶–µ —Ç–≤—ñ–π —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏–π –ø–æ–º—ñ—á–Ω–∏–∫ üí∏", reply_markup=markup)

@bot.message_handler(func=lambda m: m.text == "‚ûï –î–æ–¥–∞—Ç–∏ –≤–∏—Ç—Ä–∞—Ç—É")
def ask_amount(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ —Å—É–º—É –≤–∏—Ç—Ä–∞—Ç–∏:")
    bot.register_next_step_handler(message, get_amount)

def get_amount(message):
    try:
        amount = float(message.text)
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, —ó–∂–∞, —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç, —Ç–æ—â–æ):")
        bot.register_next_step_handler(message, get_category, amount)
    except ValueError:
        bot.send_message(message.chat.id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ.")
        ask_amount(message)

def get_category(message, amount):
    user_id = str(message.from_user.id)
    category = message.text
    entry = {
        "amount": amount,
        "category": category,
        "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    }
    expenses.setdefault(user_id, []).append(entry)
    save_expenses()
    bot.send_message(message.chat.id, f"‚úÖ –í–∏—Ç—Ä–∞—Ç—É –¥–æ–¥–∞–Ω–æ: {amount} –≥—Ä–Ω –Ω–∞ {category}.")

@bot.message_handler(func=lambda m: m.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
def stats(message):
    user_id = str(message.from_user.id)
    total = 0
    categories = {}
    for e in expenses.get(user_id, []):
        total += e['amount']
        categories[e['category']] = categories.get(e['category'], 0) + e['amount']

    if total == 0:
        bot.send_message(message.chat.id, "–ù–µ–º–∞—î –≤–∏—Ç—Ä–∞—Ç üòá")
        return

    stat_msg = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n–ó–∞–≥–∞–ª–æ–º: {total:.2f} –≥—Ä–Ω\n\n"
    for cat, amt in categories.items():
        stat_msg += f"- {cat}: {amt:.2f} –≥—Ä–Ω\n"
    bot.send_message(message.chat.id, stat_msg)

@bot.message_handler(func=lambda m: m.text == "üí∞ –ë–∞–ª–∞–Ω—Å")
def balance(message):
    user_id = str(message.from_user.id)
    total = sum(e["amount"] for e in expenses.get(user_id, []))
    bot.send_message(message.chat.id, f"üí∞ –ó–∞–≥–∞–ª—å–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏: {total:.2f} –≥—Ä–Ω")

@bot.message_handler(func=lambda m: m.text == "üìã –í—Å—ñ –≤–∏—Ç—Ä–∞—Ç–∏")
def all_expenses(message):
    user_id = str(message.from_user.id)
    user_exp = expenses.get(user_id, [])
    if not user_exp:
        bot.send_message(message.chat.id, "–£ —Ç–µ–±–µ —â–µ –Ω–µ–º–∞—î –≤–∏—Ç—Ä–∞—Ç.")
        return
    msg = "üìã –¢–≤–æ—ó –≤–∏—Ç—Ä–∞—Ç–∏:\n"
    for i, e in enumerate(user_exp, 1):
        msg += f"{i}. {e['amount']} –≥—Ä–Ω - {e['category']} ({e['timestamp']})\n"
    bot.send_message(message.chat.id, msg)

@bot.message_handler(func=lambda m: m.text == "‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏")
def edit_expense(message):
    user_id = str(message.from_user.id)
    user_exp = expenses.get(user_id, [])
    if not user_exp:
        bot.send_message(message.chat.id, "–ù–µ–º–∞—î –≤–∏—Ç—Ä–∞—Ç –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è.")
        return
    msg = "–í–∏–±–µ—Ä–∏ –Ω–æ–º–µ—Ä –≤–∏—Ç—Ä–∞—Ç–∏ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è:\n"
    for i, e in enumerate(user_exp, 1):
        msg += f"{i}. {e['amount']} –≥—Ä–Ω - {e['category']}\n"
    bot.send_message(message.chat.id, msg)
    bot.register_next_step_handler(message, get_edit_index)

def get_edit_index(message):
    try:
        idx = int(message.text) - 1
        user_id = str(message.from_user.id)
        if 0 <= idx < len(expenses[user_id]):
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ –Ω–æ–≤—É —Å—É–º—É:")
            bot.register_next_step_handler(message, get_new_amount, idx)
        else:
            bot.send_message(message.chat.id, "–ù–µ–≤—ñ—Ä–Ω–∏–π –Ω–æ–º–µ—Ä.")
    except:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –≤–∏—Ç—Ä–∞—Ç–∏.")

def get_new_amount(message, idx):
    try:
        amount = float(message.text)
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ –Ω–æ–≤—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:")
        bot.register_next_step_handler(message, apply_edit, idx, amount)
    except:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ —á–∏—Å–ª–æ.")

def apply_edit(message, idx, amount):
    user_id = str(message.from_user.id)
    expenses[user_id][idx]["amount"] = amount
    expenses[user_id][idx]["category"] = message.text
    save_expenses()
    bot.send_message(message.chat.id, "‚úÖ –í–∏—Ç—Ä–∞—Ç—É –æ–Ω–æ–≤–ª–µ–Ω–æ.")

@bot.message_handler(func=lambda m: m.text == "‚ùå –í–∏–¥–∞–ª–∏—Ç–∏")
def delete_expense(message):
    user_id = str(message.from_user.id)
    user_exp = expenses.get(user_id, [])
    if not user_exp:
        bot.send_message(message.chat.id, "–ù–µ–º–∞—î –≤–∏—Ç—Ä–∞—Ç –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è.")
        return
    msg = "–í–∏–±–µ—Ä–∏ –Ω–æ–º–µ—Ä –≤–∏—Ç—Ä–∞—Ç–∏ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:\n"
    for i, e in enumerate(user_exp, 1):
        msg += f"{i}. {e['amount']} –≥—Ä–Ω - {e['category']}\n"
    bot.send_message(message.chat.id, msg)
    bot.register_next_step_handler(message, get_delete_index)

def get_delete_index(message):
    try:
        idx = int(message.text) - 1
        user_id = str(message.from_user.id)
        if 0 <= idx < len(expenses[user_id]):
            deleted = expenses[user_id].pop(idx)
            save_expenses()
            bot.send_message(message.chat.id, f"‚ùå –í–∏–¥–∞–ª–µ–Ω–æ: {deleted['amount']} –≥—Ä–Ω - {deleted['category']}")
        else:
            bot.send_message(message.chat.id, "–ù–µ–≤—ñ—Ä–Ω–∏–π –Ω–æ–º–µ—Ä.")
    except:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä.")

def send_daily_reminders():
    for user_id in expenses:
        bot.send_message(user_id, "üîî –ù–µ –∑–∞–±—É–¥—å –∑–∞–ø–∏—Å–∞—Ç–∏ —Å–≤–æ—ó –≤–∏—Ç—Ä–∞—Ç–∏ —Å—å–æ–≥–æ–¥–Ω—ñ!")

scheduler = BackgroundScheduler(timezone=pytz.timezone("Europe/Kyiv"))
scheduler.add_job(send_daily_reminders, CronTrigger(hour=20, minute=0))
scheduler.start()

print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ...")
bot.infinity_polling()
