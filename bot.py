import os
import json
import telebot
from dotenv import load_dotenv
from telebot import types

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

bot = telebot.TeleBot(BOT_TOKEN)

DATA_FILE = "expenses.json"
GOAL_FILE = "goals.json"
INCOME_FILE = "income.json"

expenses = {}
saving_goals = {}
income_data = {}
user_temp_data = {}

categories = ["üçî –á–∂–∞", "üöï –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "üè† –ö–æ–º—É–Ω–∞–ª–∫–∞", "üéâ –†–æ–∑–≤–∞–≥–∏", "üõç –Ü–Ω—à–µ"]

# –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
def save_data():
    with open(DATA_FILE, "w") as f:
        json.dump(expenses, f, indent=2)
    with open(GOAL_FILE, "w") as f:
        json.dump(saving_goals, f, indent=2)
    with open(INCOME_FILE, "w") as f:
        json.dump(income_data, f, indent=2)

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
def load_data():
    global expenses, saving_goals, income_data
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r") as f:
            expenses = json.load(f)
    if os.path.exists(GOAL_FILE):
        with open(GOAL_FILE, "r") as f:
            saving_goals = json.load(f)
    if os.path.exists(INCOME_FILE):
        with open(INCOME_FILE, "r") as f:
            income_data = json.load(f)

load_data()

# –°—Ç–∞—Ä—Ç
@bot.message_handler(commands=['start'])
def start_handler(message):
    bot.send_message(message.chat.id, "üëã –ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ–±–ª—ñ–∫—É –≤–∏—Ç—Ä–∞—Ç. –í–≤–µ–¥–∏ —Å—É–º—É –∞–±–æ –Ω–∞—Ç–∏—Å–Ω–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é.")
    show_categories(message.chat.id)

# –ö–Ω–æ–ø–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
def show_categories(chat_id):
    markup = types.InlineKeyboardMarkup()
    for cat in categories:
        markup.add(types.InlineKeyboardButton(text=cat, callback_data=f"category_{cat}"))
    bot.send_message(chat_id, "–í–∏–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –≤–∏—Ç—Ä–∞—Ç:", reply_markup=markup)

# –û–±—Ä–æ–±–∫–∞ –≤–∏—Ç—Ä–∞—Ç —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏
@bot.callback_query_handler(func=lambda call: call.data.startswith("category_"))
def handle_category(call):
    chat_id = str(call.message.chat.id)
    category = call.data.split("_", 1)[1]
    user_temp_data[chat_id] = {'step': 'add_expense', 'category': category}
    bot.send_message(call.message.chat.id, f"–í–≤–µ–¥–∏ —Å—É–º—É –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó {category}:")

# –û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
@bot.message_handler(func=lambda m: True)
def handle_message(message):
    chat_id = str(message.chat.id)
    if chat_id not in user_temp_data:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ —Å—É–º—É –∞–±–æ –Ω–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó.")
        return

    step = user_temp_data[chat_id]['step']

    if step == 'add_expense':
        try:
            amount = float(message.text)
            category = user_temp_data[chat_id]['category']
            if chat_id not in expenses:
                expenses[chat_id] = []
            expenses[chat_id].append({"amount": amount, "category": category})
            save_data()
            bot.send_message(message.chat.id, f"‚úÖ –î–æ–¥–∞–Ω–æ {amount:.2f} –≥—Ä–Ω –¥–æ {category}")
        except:
            bot.send_message(message.chat.id, "‚ùå –í–≤–µ–¥–∏ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 50")
        user_temp_data.pop(chat_id)

    elif step == 'set_goal':
        try:
            goal = float(message.text)
            saving_goals[chat_id] = goal
            save_data()
            bot.send_message(message.chat.id, f"üéØ –¶—ñ–ª—å –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {goal:.2f} –≥—Ä–Ω")
        except:
            bot.send_message(message.chat.id, "‚ùå –í–≤–µ–¥–∏ —á–∏—Å–ª–æ –¥–ª—è —Ü—ñ–ª—ñ")
        user_temp_data.pop(chat_id)

    elif step == 'add_income':
        try:
            amount = float(message.text)
            if chat_id not in income_data:
                income_data[chat_id] = []
            income_data[chat_id].append(amount)
            save_data()
            bot.send_message(message.chat.id, f"‚úÖ –î–æ—Ö–æ–¥—É –¥–æ–¥–∞–Ω–æ: {amount:.2f} –≥—Ä–Ω")
        except:
            bot.send_message(message.chat.id, "‚ùå –í–≤–µ–¥–∏ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 10000")
        user_temp_data.pop(chat_id)

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ—Ö–æ–¥—É
@bot.message_handler(commands=['income'])
def income_handler(message):
    chat_id = str(message.chat.id)
    bot.send_message(chat_id, "üí∞ –í–≤–µ–¥–∏ —Å—É–º—É –¥–æ—Ö–æ–¥—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 15000):")
    user_temp_data[chat_id] = {'step': 'add_income'}

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Ü—ñ–ª—ñ
@bot.message_handler(commands=['goal'])
def goal_handler(message):
    chat_id = str(message.chat.id)
    goal = saving_goals.get(chat_id)
    if goal:
        bot.send_message(message.chat.id, f"üéØ –í–∞—à–∞ —Ü—ñ–ª—å: {goal:.2f} –≥—Ä–Ω")
    else:
        bot.send_message(message.chat.id, "üéØ –£ –≤–∞—Å –Ω–µ–º–∞—î –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ—ó —Ü—ñ–ª—ñ. –í–≤–µ–¥—ñ—Ç—å /goal_set —â–æ–± –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏.")

@bot.message_handler(commands=['goal_set'])
def goal_set_handler(message):
    chat_id = str(message.chat.id)
    bot.send_message(chat_id, "–í–≤–µ–¥–∏ —Å—É–º—É —Ü—ñ–ª—ñ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 10000):")
    user_temp_data[chat_id] = {'step': 'set_goal'}

# –ë–∞–ª–∞–Ω—Å / —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
@bot.message_handler(commands=['balance', 'stats'])
def balance_handler(message):
    chat_id = str(message.chat.id)
    income = sum(income_data.get(chat_id, []))
    spent = sum(entry['amount'] for entry in expenses.get(chat_id, []))
    goal = saving_goals.get(chat_id)

    text = f"üíº –î–æ—Ö–æ–¥–∏: {income:.2f} –≥—Ä–Ω\nüí∏ –í–∏—Ç—Ä–∞—Ç–∏: {spent:.2f} –≥—Ä–Ω\n"
    text += f"üìà –ë–∞–ª–∞–Ω—Å: {income - spent:.2f} –≥—Ä–Ω\n"

    if goal:
        left = goal - (income - spent)
        text += f"üéØ –¶—ñ–ª—å: {goal:.2f} –≥—Ä–Ω ‚Üí –ó–∞–ª–∏—à–∏–ª–æ—Å—å: {max(left, 0):.2f} –≥—Ä–Ω"

    bot.send_message(chat_id, text)

bot.polling()
