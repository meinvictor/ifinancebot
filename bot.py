import telebot
from telebot import types
from datetime import datetime
import json
import os
import matplotlib.pyplot as plt

TOKEN = os.getenv("TOKEN")
bot = telebot.TeleBot(TOKEN)

DATA_FILE = 'data.json'

expenses = {}
incomes = {}
user_temp_data = {}

def save_data():
    with open(DATA_FILE, 'w') as f:
        json.dump({'expenses': expenses, 'incomes': incomes}, f)

def load_data():
    global expenses, incomes
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, 'r') as f:
            data = json.load(f)
            expenses = data.get('expenses', {})
            incomes = data.get('incomes', {})

load_data()

def show_main_menu(chat_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(
        types.KeyboardButton('–î–æ—Ö—ñ–¥'),
        types.KeyboardButton('–†–æ–∑—Ö—ñ–¥'),
        types.KeyboardButton('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'),
        types.KeyboardButton('–ë–∞–ª–∞–Ω—Å')
    )
    markup.add(
        types.KeyboardButton('–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó'),
        types.KeyboardButton('–í–∏–¥–∞–ª–∏—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—é'),
        types.KeyboardButton('–ú–æ—ó –≤–∏—Ç—Ä–∞—Ç–∏'),
        types.KeyboardButton('–ú–æ—è —Ü—ñ–ª—å')
    )
    bot.send_message(chat_id, "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=markup)

@bot.message_handler(commands=['start'])
def start(message):
    chat_id = str(message.chat.id)
    expenses.setdefault(chat_id, [])
    incomes.setdefault(chat_id, [])
    show_main_menu(message.chat.id)

@bot.message_handler(func=lambda message: message.text == '–î–æ—Ö—ñ–¥')
def income_start(message):
    chat_id = message.chat.id
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add("‚Ü©Ô∏è –ù–∞–∑–∞–¥")
    bot.send_message(chat_id, "üíµ –í–≤–µ–¥–∏ —Å—É–º—É –¥–æ—Ö–æ–¥—É –∞–±–æ —Å–∫–∞—Å—É–π:", reply_markup=markup)
    user_temp_data[chat_id] = {'step': 'awaiting_income_amount'}

@bot.message_handler(func=lambda m: user_temp_data.get(m.chat.id, {}).get('step') == 'awaiting_income_amount')
def income_amount(message):
    chat_id = message.chat.id
    if message.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥":
        user_temp_data.pop(chat_id, None)
        show_main_menu(chat_id)
        return
    try:
        amount = float(message.text)
        incomes[str(chat_id)].append({"amount": amount, "date": datetime.now().isoformat()})
        save_data()
        bot.send_message(chat_id, f"‚úÖ –î–æ–¥–∞–Ω–æ –¥–æ—Ö—ñ–¥: {amount:.2f} –≥—Ä–Ω")
        user_temp_data.pop(chat_id, None)
        show_main_menu(chat_id)
    except ValueError:
        bot.send_message(chat_id, "‚ùå –í–≤–µ–¥–∏ —á–∏—Å–ª–æ.")

@bot.message_handler(func=lambda message: message.text == '–†–æ–∑—Ö—ñ–¥')
def expense_start(message):
    chat_id = message.chat.id
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add("‚Ü©Ô∏è –ù–∞–∑–∞–¥")
    bot.send_message(chat_id, "üí∏ –í–≤–µ–¥–∏ —Å—É–º—É –≤–∏—Ç—Ä–∞—Ç–∏ –∞–±–æ —Å–∫–∞—Å—É–π:", reply_markup=markup)
    user_temp_data[chat_id] = {'step': 'awaiting_expense_amount'}

@bot.message_handler(func=lambda m: user_temp_data.get(m.chat.id, {}).get('step') == 'awaiting_expense_amount')
def expense_amount(message):
    chat_id = message.chat.id
    if message.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥":
        user_temp_data.pop(chat_id, None)
        show_main_menu(chat_id)
        return
    try:
        amount = float(message.text)
        expenses[str(chat_id)].append({"amount": amount, "date": datetime.now().isoformat()})
        save_data()
        bot.send_message(chat_id, f"‚úÖ –î–æ–¥–∞–Ω–æ –≤–∏—Ç—Ä–∞—Ç—É: {amount:.2f} –≥—Ä–Ω")
        user_temp_data.pop(chat_id, None)
        show_main_menu(chat_id)
    except ValueError:
        bot.send_message(chat_id, "‚ùå –í–≤–µ–¥–∏ —á–∏—Å–ª–æ.")

@bot.message_handler(func=lambda message: message.text == '–ë–∞–ª–∞–Ω—Å')
def show_balance(message):
    chat_id = str(message.chat.id)
    total_income = sum(i['amount'] for i in incomes.get(chat_id, []))
    total_expense = sum(e['amount'] for e in expenses.get(chat_id, []))
    balance = total_income - total_expense
    bot.send_message(message.chat.id, f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance:.2f} –≥—Ä–Ω")

@bot.message_handler(func=lambda message: message.text == '–ú–æ—ó –≤–∏—Ç—Ä–∞—Ç–∏')
def show_expenses(message):
    chat_id = str(message.chat.id)
    user_expenses = expenses.get(chat_id, [])[-10:]
    if not user_expenses:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –≤–∏—Ç—Ä–∞—Ç.")
    else:
        msg = "–û—Å—Ç–∞–Ω–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏:\n"
        for e in user_expenses:
            msg += f"{e['date'][:10]} ‚Äî {e['amount']:.2f} –≥—Ä–Ω\n"
        bot.send_message(message.chat.id, msg)

@bot.message_handler(func=lambda message: message.text == '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
def show_statistics(message):
    chat_id = str(message.chat.id)
    user_expenses = expenses.get(chat_id, [])
    if not user_expenses:
        bot.send_message(message.chat.id, "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ù–µ–º–∞—î –≤–∏—Ç—Ä–∞—Ç.")
        return

    dates = [e['date'][:10] for e in user_expenses]
    amounts = [e['amount'] for e in user_expenses]

    plt.figure(figsize=(8, 4))
    plt.plot(dates, amounts, marker='o')
    plt.title('–í–∞—à—ñ –≤–∏—Ç—Ä–∞—Ç–∏')
    plt.xlabel('–î–∞—Ç–∞')
    plt.ylabel('–°—É–º–∞ (–≥—Ä–Ω)')
    plt.xticks(rotation=45)
    plt.tight_layout()
    filename = f"stat_{chat_id}.png"
    plt.savefig(filename)
    plt.close()

    with open(filename, 'rb') as photo:
        bot.send_photo(message.chat.id, photo, caption="üìä –ì—Ä–∞—Ñ—ñ–∫ –≤–∏—Ç—Ä–∞—Ç")

    os.remove(filename)

bot.polling(none_stop=True)