import telebot
import sqlite3
from datetime import datetime
import os
from telebot import types

TOKEN = os.getenv('TOKEN')
bot = telebot.TeleBot(TOKEN)

# –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
conn = sqlite3.connect('expenses.db', check_same_thread=False)
cursor = conn.cursor()
cursor.execute('''
    CREATE TABLE IF NOT EXISTS expenses (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        amount REAL,
        category TEXT,
        date TEXT
    )
''')
conn.commit()

# –°—Ç–∞—Ä—Ç –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–æ—é
@bot.message_handler(commands=['start'])
def send_welcome(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn_start = types.KeyboardButton('–°—Ç–∞—Ä—Ç')
    btn_stats = types.KeyboardButton('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
    btn_balance = types.KeyboardButton('–ë–∞–ª–∞–Ω—Å')
    markup.row(btn_start)
    markup.row(btn_stats, btn_balance)

    bot.send_message(message.chat.id,
                     "üëã –ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ–±–ª—ñ–∫—É –≤–∏—Ç—Ä–∞—Ç.\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ ‚¨áÔ∏è",
                     reply_markup=markup)

# –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫
@bot.message_handler(func=lambda message: message.text == '–°—Ç–∞—Ä—Ç')
def handle_start_button(message):
    send_welcome(message)

@bot.message_handler(func=lambda message: message.text == '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
def handle_stats_button(message):
    stats(message)

@bot.message_handler(func=lambda message: message.text == '–ë–∞–ª–∞–Ω—Å')
def handle_balance_button(message):
    balance(message)

# –î–æ–¥–∞–≤–∞–Ω–Ω—è –≤–∏—Ç—Ä–∞—Ç
@bot.message_handler(commands=['add'])
def add_expense(message):
    try:
        _, amount, *category = message.text.split()
        amount = float(amount)
        category = ' '.join(category)
        date = datetime.now().strftime("%Y-%m-%d")
        user_id = message.from_user.id
        cursor.execute("INSERT INTO expenses (user_id, amount, category, date) VALUES (?, ?, ?, ?)",
                       (user_id, amount, category, date))
        conn.commit()
        bot.send_message(message.chat.id, f"‚úÖ –î–æ–¥–∞–Ω–æ {amount} –≥—Ä–Ω —É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é '{category}'")
    except:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ü—Ä–∏–∫–ª–∞–¥: /add 150 –ü—Ä–æ–¥—É–∫—Ç–∏")

# –ë–∞–ª–∞–Ω—Å –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ
@bot.message_handler(commands=['balance'])
def balance(message):
    user_id = message.from_user.id
    today = datetime.now().strftime("%Y-%m-%d")
    cursor.execute("SELECT SUM(amount) FROM expenses WHERE user_id = ? AND date = ?", (user_id, today))
    total = cursor.fetchone()[0]
    total = total if total else 0
    bot.send_message(message.chat.id, f"üí∞ –°—å–æ–≥–æ–¥–Ω—ñ —Ç–∏ –≤–∏—Ç—Ä–∞—Ç–∏–≤: {total:.2f} –≥—Ä–Ω")

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö
@bot.message_handler(commands=['stats'])
def stats(message):
    user_id = message.from_user.id
    cursor.execute("SELECT category, SUM(amount) FROM expenses WHERE user_id = ? GROUP BY category", (user_id,))
    data = cursor.fetchall()
    if not data:
        bot.send_message(message.chat.id, "üîç –©–µ –Ω–µ–º–∞—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
        return
    text = "üìä –¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∏—Ç—Ä–∞—Ç:\n"
    for category, total in data:
        text += f"‚Äî {category}: {total:.2f} –≥—Ä–Ω\n"
    bot.send_message(message.chat.id, text)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling()
