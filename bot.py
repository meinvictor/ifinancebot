import telebot
from telebot import types
import os
from dotenv import load_dotenv

load_dotenv()
TOKEN = os.getenv("TOKEN")

bot = telebot.TeleBot(TOKEN)

# –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤–∏—Ç—Ä–∞—Ç (—Ç–∏–º—á–∞—Å–æ–≤–æ)
expenses = {}

@bot.message_handler(commands=['start'])
def send_welcome(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton('–î–æ–¥–∞—Ç–∏')
    btn2 = types.KeyboardButton('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
    btn3 = types.KeyboardButton('–ë–∞–ª–∞–Ω—Å')
    markup.add(btn1, btn2, btn3)
    bot.send_message(message.chat.id, "üëã –ü—Ä–∏–≤—ñ—Ç! –û–±–µ—Ä–∏ –¥—ñ—é:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == '–î–æ–¥–∞—Ç–∏')
def handle_add_button(message):
    bot.send_message(message.chat.id, "üìù –í–≤–µ–¥–∏ –≤–∏—Ç—Ä–∞—Ç—É —É —Ñ–æ—Ä–º–∞—Ç—ñ: —Å—É–º–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: `200 —ó–∂–∞`)")

@bot.message_handler(func=lambda message: message.text == '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
def handle_stats_button(message):
    bot.send_message(message.chat.id, "/stats")

@bot.message_handler(func=lambda message: message.text == '–ë–∞–ª–∞–Ω—Å')
def handle_balance_button(message):
    bot.send_message(message.chat.id, "/balance")

@bot.message_handler(commands=['add'])
def handle_add_command(message):
    bot.send_message(message.chat.id, "üìù –í–≤–µ–¥–∏ –≤–∏—Ç—Ä–∞—Ç—É —É —Ñ–æ—Ä–º–∞—Ç—ñ: —Å—É–º–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: `200 —ó–∂–∞`)")

@bot.message_handler(func=lambda message: message.text.startswith('/') is False)
def handle_expense_input(message):
    try:
        amount, category = message.text.split(maxsplit=1)
        amount = float(amount)
        chat_id = message.chat.id

        if chat_id not in expenses:
            expenses[chat_id] = []

        expenses[chat_id].append({'amount': amount, 'category': category})
        bot.send_message(chat_id, f"‚úÖ –î–æ–¥–∞–Ω–æ: {amount} –≥—Ä–Ω –Ω–∞ '{category}'")
    except:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏: —Å—É–º–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: `100 —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç`)")

@bot.message_handler(commands=['stats'])
def handle_stats(message):
    chat_id = message.chat.id
    if chat_id not in expenses or not expenses[chat_id]:
        bot.send_message(chat_id, "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∏ –ø–æ—Ä–æ–∂–Ω—è.")
        return

    stats = {}
    for item in expenses[chat_id]:
        category = item['category']
        stats[category] = stats.get(category, 0) + item['amount']

    response = "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∏—Ç—Ä–∞—Ç:\n"
    for category, total in stats.items():
        response += f"‚Ä¢ {category}: {total} –≥—Ä–Ω\n"
    bot.send_message(chat_id, response)

@bot.message_handler(commands=['balance'])
def handle_balance(message):
    chat_id = message.chat.id
    if chat_id not in expenses or not expenses[chat_id]:
        bot.send_message(chat_id, "üí∞ –ë–∞–ª–∞–Ω—Å: 0 –≥—Ä–Ω")
        return

    total = sum(item['amount'] for item in expenses[chat_id])
    bot.send_message(chat_id, f"üí∞ –ó–∞–≥–∞–ª—å–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏: {total} –≥—Ä–Ω")

bot.polling()
