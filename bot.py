import telebot
from telebot import types
from datetime import datetime
import json
from collections import defaultdict
from dotenv import load_dotenv
import os

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

bot = telebot.TeleBot(BOT_TOKEN)

expenses = defaultdict(list)
incomes = defaultdict(list)
user_temp_data = {}
categories = ["üçî –á–∂–∞", "üöó –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "üè† –ñ–∏—Ç–ª–æ", "üéâ –†–æ–∑–≤–∞–≥–∏", "üõçÔ∏è –ü–æ–∫—É–ø–∫–∏"]
saving_goals = {}

def save_data():
    with open("expenses.json", "w") as f:
        json.dump(expenses, f)
    with open("incomes.json", "w") as f:
        json.dump(incomes, f)
    with open("goals.json", "w") as f:
        json.dump(saving_goals, f)

def load_data():
    global expenses, incomes, saving_goals
    try:
        with open("expenses.json") as f:
            expenses = defaultdict(list, json.load(f))
        with open("incomes.json") as f:
            incomes = defaultdict(list, json.load(f))
        with open("goals.json") as f:
            saving_goals = json.load(f)
    except FileNotFoundError:
        pass

@bot.message_handler(commands=['start'])
def start(message):
    load_data()
    show_main_menu(message.chat.id)


def show_main_menu(chat_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(
        types.KeyboardButton('–†–æ–∑—Ö—ñ–¥'),
        types.KeyboardButton('–î–æ—Ö—ñ–¥'),
        types.KeyboardButton('–ë–∞–ª–∞–Ω—Å'),
        types.KeyboardButton('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'),
        types.KeyboardButton('–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó'),
        types.KeyboardButton('–ú–æ—ó –≤–∏—Ç—Ä–∞—Ç–∏'),
        types.KeyboardButton('–ú–æ—è —Ü—ñ–ª—å'),
        types.KeyboardButton('–í–∏–¥–∞–ª–∏—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—é')
    )
    bot.send_message(chat_id, "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == "–†–æ–∑—Ö—ñ–¥")
def start_expense(message):
    chat_id = message.chat.id
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for cat in categories:
        markup.add(types.KeyboardButton(cat))
    markup.add(types.KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥"))
    bot.send_message(chat_id, "–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", reply_markup=markup)
    user_temp_data[chat_id] = {'step': 'awaiting_expense_category'}

@bot.message_handler(func=lambda m: user_temp_data.get(m.chat.id, {}).get('step') == 'awaiting_expense_category')
def category_chosen(message):
    chat_id = message.chat.id
    category = message.text
    if category == "‚Ü©Ô∏è –ù–∞–∑–∞–¥":
        user_temp_data.pop(chat_id, None)
        show_main_menu(chat_id)
        return
    if category not in categories:
        bot.send_message(chat_id, "‚ùå –ù–µ–≤—ñ—Ä–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è.")
        return
    user_temp_data[chat_id] = {'step': 'awaiting_expense_amount', 'category': category}
    bot.send_message(chat_id, f"–í–≤–µ–¥–∏ —Å—É–º—É –≤–∏—Ç—Ä–∞—Ç–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó {category}:")

@bot.message_handler(func=lambda m: user_temp_data.get(m.chat.id, {}).get('step') == 'awaiting_expense_amount')
def expense_amount(message):
    chat_id = message.chat.id
    try:
        amount = float(message.text)
        category = user_temp_data[chat_id]['category']
        expenses[chat_id].append({"amount": amount, "category": category, "date": datetime.now().isoformat()})
        save_data()
        bot.send_message(chat_id, f"‚úÖ –î–æ–¥–∞–Ω–æ –≤–∏—Ç—Ä–∞—Ç—É {amount:.2f} –≥—Ä–Ω –≤ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é {category}")
        user_temp_data.pop(chat_id, None)
        show_main_menu(chat_id)
    except ValueError:
        bot.send_message(chat_id, "‚ùå –í–≤–µ–¥–∏ —á–∏—Å–ª–æ.")

@bot.message_handler(func=lambda message: message.text == "–î–æ—Ö—ñ–¥")
def income_start(message):
    chat_id = message.chat.id
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add("‚Ü©Ô∏è –ù–∞–∑–∞–¥")
    bot.send_message(chat_id, "üíµ –í–≤–µ–¥–∏ —Å—É–º—É –¥–æ—Ö–æ–¥—É –∞–±–æ —Å–∫–∞—Å—É–π:", reply_markup=markup)
    user_temp_data[chat_id] = {'step': 'awaiting_income_amount'}

@bot.message_handler(func=lambda m: user_temp_data.get(m.chat.id, {}).get('step') == 'awaiting_income_amount')
def income_amount(message):
    chat_id = message.chat.id
    if message.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥":
        user_temp_data.pop(chat_id, None)
        show_main_menu(chat_id)
        return
    try:
        amount = float(message.text)
        incomes[chat_id].append({"amount": amount, "date": datetime.now().isoformat()})
        save_data()
        bot.send_message(chat_id, f"‚úÖ –î–æ–¥–∞–Ω–æ –¥–æ—Ö—ñ–¥: {amount:.2f} –≥—Ä–Ω")
        user_temp_data.pop(chat_id, None)
        show_main_menu(chat_id)
    except ValueError:
        bot.send_message(chat_id, "‚ùå –í–≤–µ–¥–∏ —á–∏—Å–ª–æ.")

@bot.message_handler(func=lambda message: message.text == "–ë–∞–ª–∞–Ω—Å")
def balance(message):
    chat_id = message.chat.id
    total_income = sum(i["amount"] for i in incomes.get(str(chat_id), []))
    total_expense = sum(e["amount"] for e in expenses.get(str(chat_id), []))
    bot.send_message(chat_id, f"üìä –ë–∞–ª–∞–Ω—Å: {total_income - total_expense:.2f} –≥—Ä–Ω\n\nüíµ –î–æ—Ö—ñ–¥: {total_income:.2f} –≥—Ä–Ω\nüí∏ –í–∏—Ç—Ä–∞—Ç–∏: {total_expense:.2f} –≥—Ä–Ω")

@bot.message_handler(func=lambda message: message.text == "–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó")
def show_categories(message):
    chat_id = message.chat.id
    bot.send_message(chat_id, "–ü–æ—Ç–æ—á–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó:")
    for cat in categories:
        bot.send_message(chat_id, cat)

@bot.message_handler(func=lambda message: message.text == "–ú–æ—ó –≤–∏—Ç—Ä–∞—Ç–∏")
def show_expenses(message):
    chat_id = message.chat.id
    if not expenses.get(str(chat_id)):
        bot.send_message(chat_id, "–ù–µ–º–∞—î –∑–∞–ø–∏—Å–∞–Ω–∏—Ö –≤–∏—Ç—Ä–∞—Ç.")
        return
    msg = "–û—Å—Ç–∞–Ω–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏:\n"
    for e in expenses[str(chat_id)][-5:]:
        msg += f"- {e['amount']} –≥—Ä–Ω | {e['category']} | {e['date'][:10]}\n"
    bot.send_message(chat_id, msg)

@bot.message_handler(func=lambda message: message.text == "–í–∏–¥–∞–ª–∏—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—é")
def delete_last(message):
    chat_id = str(message.chat.id)
    if expenses[chat_id]:
        removed = expenses[chat_id].pop()
        save_data()
        bot.send_message(chat_id, f"‚ùå –í–∏–¥–∞–ª–µ–Ω–æ: {removed['amount']} –≥—Ä–Ω ‚Äî {removed['category']}")
    else:
        bot.send_message(chat_id, "‚ùå –ù–µ–º–∞—î –≤–∏—Ç—Ä–∞—Ç –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è.")

@bot.message_handler(func=lambda message: message.text == "–ú–æ—è —Ü—ñ–ª—å")
def saving_goal(message):
    chat_id = str(message.chat.id)
    bot.send_message(chat_id, "–í–≤–µ–¥–∏ –±–∞–∂–∞–Ω—É —Å—É–º—É –Ω–∞–∫–æ–ø–∏—á–µ–Ω–Ω—è:")
    user_temp_data[chat_id] = {'step': 'awaiting_goal'}

@bot.message_handler(func=lambda m: user_temp_data.get(str(m.chat.id), {}).get('step') == 'awaiting_goal')
def goal_input(message):
    chat_id = str(message.chat.id)
    try:
        goal = float(message.text)
        saving_goals[chat_id] = goal
        save_data()
        user_temp_data.pop(chat_id, None)
        bot.send_message(chat_id, f"üéØ –¶—ñ–ª—å –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {goal:.2f} –≥—Ä–Ω")
    except ValueError:
        bot.send_message(chat_id, "‚ùå –í–≤–µ–¥–∏ —á–∏—Å–ª–æ.")

print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ")
bot.polling(none_stop=True)
