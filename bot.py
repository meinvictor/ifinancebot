import telebot
import json
import os
from datetime import datetime
from telebot import types
from dotenv import load_dotenv


# === –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—É ===
load_dotenv()
TOKEN = os.getenv("TOKEN")
bot = telebot.TeleBot(TOKEN)

expenses = {}
saving_goals = {}
income_data = {}
user_temp_data = {}

DATA_FILE = "expenses.json"
GOAL_FILE = "goals.json"
INCOME_FILE = "income.json"

def save_data():
    with open(DATA_FILE, "w") as f:
        json.dump(expenses, f, indent=2)
    with open(GOAL_FILE, "w") as f:
        json.dump(saving_goals, f, indent=2)
    with open(INCOME_FILE, "w") as f:
        json.dump(income_data, f, indent=2)

def load_data():
    global expenses, saving_goals, income_data
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r") as f:
            expenses = json.load(f)
    if os.path.exists(GOAL_FILE):
        with open(GOAL_FILE, "r") as f:
            saving_goals = json.load(f)
    if os.path.exists(INCOME_FILE):
        with open(INCOME_FILE, "r") as f:
            income_data = json.load(f)

load_data()

@bot.message_handler(commands=['start'])
def start_handler(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("–ú–æ—è —Ü—ñ–ª—å"))
    bot.send_message(message.chat.id, "üëã –ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ–±–ª—ñ–∫—É –≤–∏—Ç—Ä–∞—Ç.\n\n–ù–∞–ø–∏—à–∏ —Å—É–º—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 200), —â–æ–± –¥–æ–¥–∞—Ç–∏ –≤–∏—Ç—Ä–∞—Ç—É.\n\n–ö–æ–º–∞–Ω–¥–∏:\n/stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n/goal ‚Äî —Ü—ñ–ª—å –Ω–∞–∫–æ–ø–∏—á–µ–Ω–Ω—è\n/income ‚Äî –¥–æ–¥–∞—Ç–∏ –¥–æ—Ö—ñ–¥\n/balance ‚Äî –∑–∞–≥–∞–ª—å–Ω–∏–π –±–∞–ª–∞–Ω—Å", reply_markup=markup)

@bot.message_handler(commands=['stats'])
def stats_handler(message):
    chat_id = str(message.chat.id)
    if chat_id not in expenses or not expenses[chat_id]:
        bot.send_message(chat_id, "–£ –≤–∞—Å –ø–æ–∫–∏ –Ω–µ–º–∞—î –≤–∏—Ç—Ä–∞—Ç.")
        return
    total = sum(entry['amount'] for entry in expenses[chat_id])
    text = f"üìä –ó–∞–≥–∞–ª—å–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏: {total:.2f} –≥—Ä–Ω\n\n–û—Å—Ç–∞–Ω–Ω—ñ:\n"
    for entry in expenses[chat_id][-5:]:
        text += f"- {entry['amount']} –≥—Ä–Ω ({entry['date']})\n"
    bot.send_message(chat_id, text)

@bot.message_handler(commands=['goal'])
def handle_goal_command(message):
    chat_id = str(message.chat.id)
    args = message.text.strip().split()

    if len(args) == 2:
        cmd = args[1].lower()

        if cmd == 'set' or cmd == 'edit':
            bot.send_message(chat_id, "üìù –í–≤–µ–¥–∏ —Å—É–º—É –¥–ª—è —Ü—ñ–ª—ñ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 10000):")
            user_temp_data[chat_id] = {'step': 'set_goal'}
            return

        elif cmd == 'delete':
            if chat_id in saving_goals:
                saving_goals.pop(chat_id)
                save_data()
                bot.send_message(chat_id, "üóëÔ∏è –¶—ñ–ª—å –≤–∏–¥–∞–ª–µ–Ω–æ.")
            else:
                bot.send_message(chat_id, "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ–º–∞—î –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ—ó —Ü—ñ–ª—ñ.")
            return

        else:
            try:
                goal = float(cmd)
                saving_goals[chat_id] = goal
                save_data()
                bot.send_message(chat_id, f"‚úÖ –¶—ñ–ª—å –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {goal:.2f} –≥—Ä–Ω")
                return
            except:
                bot.send_message(chat_id, "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –ù–∞–ø–∏—à—ñ—Ç—å /goal 10000 –∞–±–æ /goal set")
                return
    else:
        goal = saving_goals.get(chat_id)
        if goal:
            income = sum(income_data.get(chat_id, []))
            spent = sum(entry['amount'] for entry in expenses.get(chat_id, []))
            left = goal - (income - spent)
            bot.send_message(chat_id, f"üéØ –í–∞—à–∞ —Ü—ñ–ª—å: {goal:.2f} –≥—Ä–Ω\n–ó–∞–ª–∏—à–∏–ª–æ—Å—å: {max(left, 0):.2f} –≥—Ä–Ω")
        else:
            bot.send_message(chat_id, "üéØ –£ –≤–∞—Å –Ω–µ–º–∞—î –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ—ó —Ü—ñ–ª—ñ. –í–≤–µ–¥—ñ—Ç—å /goal set —â–æ–± –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏.")

@bot.message_handler(commands=['income'])
def income_handler(message):
    chat_id = str(message.chat.id)
    bot.send_message(chat_id, "üí∞ –í–≤–µ–¥–∏ —Å—É–º—É –¥–æ—Ö–æ–¥—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 15000):")
    user_temp_data[chat_id] = {'step': 'add_income'}

@bot.message_handler(commands=['balance'])
def balance_handler(message):
    chat_id = str(message.chat.id)
    income = sum(income_data.get(chat_id, []))
    spent = sum(entry['amount'] for entry in expenses.get(chat_id, []))
    goal = saving_goals.get(chat_id, None)

    text = f"üíº –î–æ—Ö–æ–¥–∏: {income:.2f} –≥—Ä–Ω\nüí∏ –í–∏—Ç—Ä–∞—Ç–∏: {spent:.2f} –≥—Ä–Ω\nüìà –ë–∞–ª–∞–Ω—Å: {income - spent:.2f} –≥—Ä–Ω\n"
    if goal:
        left = goal - (income - spent)
        text += f"üéØ –¶—ñ–ª—å: {goal:.2f} –≥—Ä–Ω ‚Üí –ó–∞–ª–∏—à–∏–ª–æ—Å—å: {max(left, 0):.2f} –≥—Ä–Ω"
    bot.send_message(chat_id, text)

@bot.message_handler(func=lambda message: True)
def handle_message(message):
    chat_id = str(message.chat.id)

    if chat_id in user_temp_data:
        step = user_temp_data[chat_id]['step']

        if step == 'set_goal':
            try:
                goal = float(message.text)
                saving_goals[chat_id] = goal
                save_data()
                bot.send_message(chat_id, f"‚úÖ –¶—ñ–ª—å –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {goal:.2f} –≥—Ä–Ω")
            except:
                bot.send_message(chat_id, "‚ùå –í–≤–µ–¥–∏ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 10000")
            user_temp_data.pop(chat_id)

        elif step == 'add_income':
            try:
                amount = float(message.text)
                if chat_id not in income_data:
                    income_data[chat_id] = []
                income_data[chat_id].append(amount)
                save_data()
                bot.send_message(chat_id, f"‚úÖ –î–æ—Ö—ñ–¥ –¥–æ–¥–∞–Ω–æ: {amount:.2f} –≥—Ä–Ω")
            except:
                bot.send_message(chat_id, "‚ùå –í–≤–µ–¥–∏ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 10000")
            user_temp_data.pop(chat_id)

    elif message.text.lower() == "–º–æ—è —Ü—ñ–ª—å":
        goal = saving_goals.get(chat_id)
        if goal:
            income = sum(income_data.get(chat_id, []))
            spent = sum(entry['amount'] for entry in expenses.get(chat_id, []))
            left = goal - (income - spent)
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("–†–µ–¥–∞–≥—É–≤–∞—Ç–∏", callback_data="edit_goal"))
            markup.add(types.InlineKeyboardButton("–í–∏–¥–∞–ª–∏—Ç–∏", callback_data="delete_goal"))
            bot.send_message(chat_id, f"üéØ –í–∞—à–∞ —Ü—ñ–ª—å: {goal:.2f} –≥—Ä–Ω\n–ó–∞–ª–∏—à–∏–ª–æ—Å—å: {max(left, 0):.2f} –≥—Ä–Ω", reply_markup=markup)
        else:
            bot.send_message(chat_id, "üéØ –£ –≤–∞—Å –Ω–µ–º–∞—î –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ—ó —Ü—ñ–ª—ñ. –í–≤–µ–¥—ñ—Ç—å /goal set —â–æ–± –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏.")

    else:
        try:
            amount = float(message.text)
            if chat_id not in expenses:
                expenses[chat_id] = []
            expenses[chat_id].append({"amount": amount, "date": datetime.now().strftime("%Y-%m-%d")})
            save_data()
            bot.send_message(chat_id, f"‚úÖ –î–æ–¥–∞–Ω–æ –≤–∏—Ç—Ä–∞—Ç—É: {amount:.2f} –≥—Ä–Ω")
        except:
            bot.send_message(chat_id, "‚ùå –í–≤–µ–¥–∏ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 200")

@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    chat_id = str(call.message.chat.id)
    if call.data == "edit_goal":
        bot.send_message(chat_id, "üìù –í–≤–µ–¥–∏ –Ω–æ–≤—É —Å—É–º—É –¥–ª—è —Ü—ñ–ª—ñ:")
        user_temp_data[chat_id] = {'step': 'set_goal'}
    elif call.data == "delete_goal":
        if chat_id in saving_goals:
            saving_goals.pop(chat_id)
            save_data()
            bot.send_message(chat_id, "üóëÔ∏è –¶—ñ–ª—å –≤–∏–¥–∞–ª–µ–Ω–æ.")
        else:
            bot.send_message(chat_id, "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ–º–∞—î –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ—ó —Ü—ñ–ª—ñ.")

bot.polling(none_stop=True)
