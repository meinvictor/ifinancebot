import telebot
from telebot import types
import os
from dotenv import load_dotenv

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è .env —Ñ–∞–π–ª—É
load_dotenv()
TOKEN = os.getenv("TOKEN")

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
bot = telebot.TeleBot(TOKEN)

# –¢–∏–º—á–∞—Å–æ–≤–µ —Å—Ö–æ–≤–∏—â–µ –≤–∏—Ç—Ä–∞—Ç —É –ø–∞–º º—è—Ç—ñ
expenses = {}
user_temp_data = {}

# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(
        types.KeyboardButton('–î–æ–¥–∞—Ç–∏'),
        types.KeyboardButton('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'),
        types.KeyboardButton('–ë–∞–ª–∞–Ω—Å')
    )
    bot.send_message(
        message.chat.id,
        "üëã –ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ–±–ª—ñ–∫—É –≤–∏—Ç—Ä–∞—Ç.\n–û–±–µ—Ä–∏ –¥—ñ—é –∫–Ω–æ–ø–∫–æ—é –Ω–∏–∂—á–µ –∞–±–æ –≤–≤–µ–¥–∏ –≤—Ä—É—á–Ω—É.",
        reply_markup=markup
    )

# –î–û–î–ê–í–ê–ù–ù–Ø –í–ò–¢–†–ê–¢ ‚Äî –∫—Ä–æ–∫ 1: –∑–∞–ø–∏—Ç —Å—É–º–∏
@bot.message_handler(func=lambda message: message.text == '–î–æ–¥–∞—Ç–∏')
def handle_add_button(message):
    bot.send_message(message.chat.id, "üíµ –í–≤–µ–¥–∏ —Å—É–º—É –≤–∏—Ç—Ä–∞—Ç–∏:")
    user_temp_data[message.chat.id] = {'step': 'awaiting_amount'}

# –û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–æ—ó —Å—É–º–∏ ‚Äî –∫—Ä–æ–∫ 2: –≤–∏–±—ñ—Ä –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
@bot.message_handler(func=lambda message: user_temp_data.get(message.chat.id, {}).get('step') == 'awaiting_amount')
def handle_amount_input(message):
    try:
        amount = float(message.text)
        user_temp_data[message.chat.id]['amount'] = amount
        user_temp_data[message.chat.id]['step'] = 'awaiting_category'

        markup = types.InlineKeyboardMarkup()
        for cat in ['–á–∂–∞', '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç', '–ü–æ–∫—É–ø–∫–∏', '–Ü–Ω—à–µ']:
            markup.add(types.InlineKeyboardButton(text=cat, callback_data=f'category:{cat}'))

        bot.send_message(message.chat.id, "üìÇ –í–∏–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", reply_markup=markup)
    except:
        bot.send_message(message.chat.id, "‚ùå –í–≤–µ–¥–∏ —Å—É–º—É —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 150)")

# –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó ‚Äî –∫—Ä–æ–∫ 3: –∑–∞–ø–∏—Å
@bot.callback_query_handler(func=lambda call: call.data.startswith('category:'))
def handle_category_selection(call):
    chat_id = call.message.chat.id
    category = call.data.split(':')[1]

    amount = user_temp_data.get(chat_id, {}).get('amount')
    if amount is None:
        bot.send_message(chat_id, "‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑ –Ω–∞—Ç–∏—Å–Ω—É—Ç–∏ '–î–æ–¥–∞—Ç–∏'")
        return

    if chat_id not in expenses:
        expenses[chat_id] = []
    expenses[chat_id].append({'amount': amount, 'category': category})

    # –û—á–∏—Å—Ç–∏—Ç–∏ —Ç–∏–º—á–∞—Å–æ–≤—ñ –¥–∞–Ω—ñ
    user_temp_data.pop(chat_id, None)

    bot.send_message(chat_id, f"‚úÖ –î–æ–¥–∞–Ω–æ: {amount:.2f} –≥—Ä–Ω –Ω–∞ \"{category}\"")

# –ö–Ω–æ–ø–∫–∞ "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
@bot.message_handler(func=lambda message: message.text == '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
def handle_stats_button(message):
    show_stats(message)

# –ö–Ω–æ–ø–∫–∞ "–ë–∞–ª–∞–Ω—Å"
@bot.message_handler(func=lambda message: message.text == '–ë–∞–ª–∞–Ω—Å')
def handle_balance_button(message):
    show_balance(message)

# –ö–æ–º–∞–Ω–¥–∞ /add (–∑–∞–ª–∏—à–∞—î—Ç—å—Å—è —è–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞)
@bot.message_handler(commands=['add'])
def handle_add_command(message):
    bot.send_message(message.chat.id, "üìù –í–≤–µ–¥–∏ –≤–∏—Ç—Ä–∞—Ç—É —É —Ñ–æ—Ä–º–∞—Ç—ñ: `—Å—É–º–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è`\n–ù–∞–ø—Ä–∏–∫–ª–∞–¥: `150 —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç`")

# –ü—Ä—è–º–∏–π —Ç–µ–∫—Å—Ç–æ–≤–∏–π –≤–≤—ñ–¥ —É —Ñ–æ—Ä–º–∞—Ç—ñ "—Å—É–º–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è"
@bot.message_handler(func=lambda message: not message.text.startswith('/'))
def handle_expense_input(message):
    try:
        amount, category = message.text.split(maxsplit=1)
        amount = float(amount)
        chat_id = message.chat.id

        if chat_id not in expenses:
            expenses[chat_id] = []

        expenses[chat_id].append({'amount': amount, 'category': category})
        bot.send_message(chat_id, f"‚úÖ –î–æ–¥–∞–Ω–æ: {amount} –≥—Ä–Ω –Ω–∞ \"{category}\"")
    except:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏: `—Å—É–º–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è`, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: `100 —ó–∂–∞`")

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (—á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É –∞–±–æ –∫–Ω–æ–ø–∫—É)
@bot.message_handler(commands=['stats'])
def handle_stats_command(message):
    show_stats(message)

def show_stats(message):
    chat_id = message.chat.id
    if chat_id not in expenses or not expenses[chat_id]:
        bot.send_message(chat_id, "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∏ –ø–æ—Ä–æ–∂–Ω—è.")
        return

    stats = {}
    for item in expenses[chat_id]:
        category = item['category']
        stats[category] = stats.get(category, 0) + item['amount']

    response = "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∏—Ç—Ä–∞—Ç:\n"
    for category, total in stats.items():
        response += f"‚Ä¢ {category}: {total:.2f} –≥—Ä–Ω\n"
    bot.send_message(chat_id, response)

# –ë–∞–ª–∞–Ω—Å (—á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É –∞–±–æ –∫–Ω–æ–ø–∫—É)
@bot.message_handler(commands=['balance'])
def handle_balance_command(message):
    show_balance(message)

def show_balance(message):
    chat_id = message.chat.id
    if chat_id not in expenses or not expenses[chat_id]:
        bot.send_message(chat_id, "üí∞ –ë–∞–ª–∞–Ω—Å: 0 –≥—Ä–Ω")
        return

    total = sum(item['amount'] for item in expenses[chat_id])
    bot.send_message(chat_id, f"üí∞ –ó–∞–≥–∞–ª—å–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏: {total:.2f} –≥—Ä–Ω")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling()
