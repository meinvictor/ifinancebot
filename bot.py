import os
import json
from datetime import datetime
import telebot
from telebot import types
from dotenv import load_dotenv

load_dotenv()

BOT_TOKEN = os.getenv("TOKEN")
bot = telebot.TeleBot(BOT_TOKEN)

expenses = {}
incomes = {}
savings_goals = {}
user_temp_data = {}

DATA_FILE = 'data.json'

# ---------- –ó–ë–ï–†–ï–ñ–ï–ù–ù–Ø / –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø ----------
def save_data():
    with open(DATA_FILE, 'w') as f:
        json.dump({"expenses": expenses, "incomes": incomes, "savings_goals": savings_goals}, f)

def load_data():
    global expenses, incomes, savings_goals
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE) as f:
            data = json.load(f)
            expenses = data.get("expenses", {})
            incomes = data.get("incomes", {})
            savings_goals = data.get("savings_goals", {})

load_data()

# ---------- –ì–û–õ–û–í–ù–ï –ú–ï–ù–Æ ----------
def show_main_menu(chat_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(
        types.KeyboardButton('–î–æ—Ö—ñ–¥'),
        types.KeyboardButton('–†–æ–∑—Ö—ñ–¥'),
        types.KeyboardButton('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'),
        types.KeyboardButton('–ë–∞–ª–∞–Ω—Å'),
        types.KeyboardButton('–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó'),
        types.KeyboardButton('–í–∏–¥–∞–ª–∏—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—é'),
        types.KeyboardButton('–ú–æ—ó –≤–∏—Ç—Ä–∞—Ç–∏'),
        types.KeyboardButton('–ú–æ—è —Ü—ñ–ª—å')
    )
    bot.send_message(chat_id, "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=markup)

# ---------- –°–¢–ê–†–¢ ----------
@bot.message_handler(commands=['start'])
def start(message):
    chat_id = str(message.chat.id)
    expenses.setdefault(chat_id, [])
    incomes.setdefault(chat_id, [])
    savings_goals.setdefault(chat_id, None)
    show_main_menu(chat_id)

# ---------- –î–û–•–Ü–î ----------
@bot.message_handler(func=lambda m: m.text == "–î–æ—Ö—ñ–¥")
def income_start(message):
    chat_id = message.chat.id
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add("‚Ü©Ô∏è –ù–∞–∑–∞–¥")
    bot.send_message(chat_id, "üíµ –í–≤–µ–¥–∏ —Å—É–º—É –¥–æ—Ö–æ–¥—É –∞–±–æ —Å–∫–∞—Å—É–π:", reply_markup=markup)
    user_temp_data[chat_id] = {'step': 'awaiting_income_amount'}

@bot.message_handler(func=lambda m: user_temp_data.get(m.chat.id, {}).get('step') == 'awaiting_income_amount')
def income_amount(message):
    chat_id = message.chat.id
    if message.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥":
        user_temp_data.pop(chat_id, None)
        show_main_menu(chat_id)
        return
    try:
        amount = float(message.text)
        incomes[str(chat_id)].append({"amount": amount, "date": datetime.now().isoformat()})
        save_data()
        bot.send_message(chat_id, f"‚úÖ –î–æ–¥–∞–Ω–æ –¥–æ—Ö—ñ–¥: {amount:.2f} –≥—Ä–Ω")
        user_temp_data.pop(chat_id, None)
        show_main_menu(chat_id)
    except ValueError:
        bot.send_message(chat_id, "‚ùå –í–≤–µ–¥–∏ —á–∏—Å–ª–æ.")

# ---------- –†–û–ó–•–Ü–î ----------
@bot.message_handler(func=lambda m: m.text == "–†–æ–∑—Ö—ñ–¥")
def expense_start(message):
    chat_id = message.chat.id
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add("‚Ü©Ô∏è –ù–∞–∑–∞–¥")
    bot.send_message(chat_id, "üí∏ –í–≤–µ–¥–∏ —Å—É–º—É –≤–∏—Ç—Ä–∞—Ç–∏:", reply_markup=markup)
    user_temp_data[chat_id] = {'step': 'awaiting_expense_amount'}

@bot.message_handler(func=lambda m: user_temp_data.get(m.chat.id, {}).get('step') == 'awaiting_expense_amount')
def expense_amount(message):
    chat_id = message.chat.id
    if message.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥":
        user_temp_data.pop(chat_id, None)
        show_main_menu(chat_id)
        return
    try:
        amount = float(message.text)
        expenses[str(chat_id)].append({"amount": amount, "date": datetime.now().isoformat()})
        save_data()
        bot.send_message(chat_id, f"‚úÖ –î–æ–¥–∞–Ω–æ –≤–∏—Ç—Ä–∞—Ç—É: {amount:.2f} –≥—Ä–Ω")
        user_temp_data.pop(chat_id, None)
        show_main_menu(chat_id)
    except ValueError:
        bot.send_message(chat_id, "‚ùå –í–≤–µ–¥–∏ —á–∏—Å–ª–æ.")

# ---------- –°–¢–ê–¢–ò–°–¢–ò–ö–ê ----------
@bot.message_handler(func=lambda m: m.text == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
def show_stats(message):
    chat_id = str(message.chat.id)
    total_exp = sum(e['amount'] for e in expenses.get(chat_id, []))
    total_inc = sum(i['amount'] for i in incomes.get(chat_id, []))
    bot.send_message(message.chat.id, f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n–ó–∞–≥–∞–ª—å–Ω–∏–π –¥–æ—Ö—ñ–¥: {total_inc:.2f} –≥—Ä–Ω\n–ó–∞–≥–∞–ª—å–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏: {total_exp:.2f} –≥—Ä–Ω")

# ---------- –ë–ê–õ–ê–ù–° ----------
@bot.message_handler(func=lambda m: m.text == "–ë–∞–ª–∞–Ω—Å")
def show_balance(message):
    chat_id = str(message.chat.id)
    total_exp = sum(e['amount'] for e in expenses.get(chat_id, []))
    total_inc = sum(i['amount'] for i in incomes.get(chat_id, []))
    balance = total_inc - total_exp
    bot.send_message(message.chat.id, f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance:.2f} –≥—Ä–Ω")

# ---------- –ú–û–á –í–ò–¢–†–ê–¢–ò ----------
@bot.message_handler(func=lambda m: m.text == "–ú–æ—ó –≤–∏—Ç—Ä–∞—Ç–∏")
def my_expenses(message):
    chat_id = str(message.chat.id)
    items = expenses.get(chat_id, [])[-5:]
    if not items:
        bot.send_message(message.chat.id, "‚ÑπÔ∏è –ù–µ–º–∞—î –≤–∏—Ç—Ä–∞—Ç")
    else:
        text = "üßæ –û—Å—Ç–∞–Ω–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏:\n" + "\n".join([f"{e['amount']} –≥—Ä–Ω - {e['date'][:10]}" for e in items])
        bot.send_message(message.chat.id, text)

# ---------- –¶–Ü–õ–¨ ----------
@bot.message_handler(func=lambda m: m.text == "–ú–æ—è —Ü—ñ–ª—å")
def goal_status(message):
    chat_id = str(message.chat.id)
    goal = savings_goals.get(chat_id)
    if goal:
        total_exp = sum(e['amount'] for e in expenses.get(chat_id, []))
        total_inc = sum(i['amount'] for i in incomes.get(chat_id, []))
        balance = total_inc - total_exp
        progress = min(balance / goal * 100, 100)
        bot.send_message(message.chat.id, f"üéØ –í–∞—à–∞ —Ü—ñ–ª—å: {goal} –≥—Ä–Ω\n–ü—Ä–æ–≥—Ä–µ—Å: {progress:.2f}%")
    else:
        bot.send_message(message.chat.id, "üéØ –£ –≤–∞—Å –Ω–µ–º–∞—î –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ—ó —Ü—ñ–ª—ñ. –í–≤–µ–¥—ñ—Ç—å /goal_set —â–æ–± –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏.")

@bot.message_handler(commands=['goal_set'])
def set_goal(message):
    chat_id = message.chat.id
    bot.send_message(chat_id, "üéØ –í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –≤–∞—à–æ—ó —Ü—ñ–ª—ñ:")
    user_temp_data[chat_id] = {'step': 'awaiting_goal_amount'}

@bot.message_handler(func=lambda m: user_temp_data.get(m.chat.id, {}).get('step') == 'awaiting_goal_amount')
def save_goal(message):
    chat_id = str(message.chat.id)
    try:
        goal = float(message.text)
        savings_goals[chat_id] = goal
        save_data()
        user_temp_data.pop(message.chat.id, None)
        bot.send_message(message.chat.id, f"üéØ –¶—ñ–ª—å –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {goal:.2f} –≥—Ä–Ω")
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ.")

# ---------- –í–ò–î–ê–õ–ò–¢–ò –û–°–¢–ê–ù–ù–Æ –í–ò–¢–†–ê–¢–£ ----------
@bot.message_handler(func=lambda m: m.text == "–í–∏–¥–∞–ª–∏—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—é")
def delete_last(message):
    chat_id = str(message.chat.id)
    if expenses.get(chat_id):
        last = expenses[chat_id].pop()
        save_data()
        bot.send_message(message.chat.id, f"‚ùå –í–∏–¥–∞–ª–µ–Ω–æ: {last['amount']} –≥—Ä–Ω")
    else:
        bot.send_message(message.chat.id, "‚ÑπÔ∏è –ù–µ–º–∞—î –≤–∏—Ç—Ä–∞—Ç –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è.")

# ---------- –ö–ê–¢–ï–ì–û–†–Ü–á (—Ç–∏–º—á–∞—Å–æ–≤–æ –∑–∞–≥–ª—É—à–∫–∞) ----------
@bot.message_handler(func=lambda m: m.text == "–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó")
def show_categories(message):
    bot.send_message(message.chat.id, "üîß –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó —â–µ –Ω–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ.")

# ---------- –û–ë–†–û–ë–ö–ê –í–°–¨–û–ì–û –Ü–ù–®–û–ì–û ----------
@bot.message_handler(func=lambda m: True)
def fallback(message):
    bot.send_message(message.chat.id, "‚ùì –ö–æ–º–∞–Ω–¥—É –Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–æ. –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é.")

print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ...")
bot.polling(none_stop=True)
