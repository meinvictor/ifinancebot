import telebot
from telebot import types
import os
from dotenv import load_dotenv
from datetime import datetime, time, timedelta
import json
from collections import defaultdict
import matplotlib.pyplot as plt
import threading
import time as time_module
import pytz

# === –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—É ===
load_dotenv()
TOKEN = os.getenv("TOKEN")
bot = telebot.TeleBot(TOKEN)

# === –î–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ ===
expenses = defaultdict(list)
user_temp_data = {}
user_categories = {}
subscriptions = {}

# === –î–µ—Ñ–æ–ª—Ç–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó ===
default_categories = ['–á–∂–∞', '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç', '–ü–æ–∫—É–ø–∫–∏', '–Ü–Ω—à–µ']

# === –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó ===
def save_data():
    with open("expenses.json", "w") as f:
        json.dump(expenses, f, indent=2, default=str)

def load_data():
    global expenses
    if os.path.exists("expenses.json"):
        with open("expenses.json", "r") as f:
            data = json.load(f)
            for chat_id, items in data.items():
                expenses[int(chat_id)] = [
                    {"amount": float(i['amount']), "category": i['category'], "date": i['date']} for i in items
                ]

load_data()

# === –ú–µ–Ω—é ===
def show_main_menu(chat_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(
        types.KeyboardButton('–î–æ–¥–∞—Ç–∏'),
        types.KeyboardButton('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'),
        types.KeyboardButton('–ë–∞–ª–∞–Ω—Å'),
        types.KeyboardButton('–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó'),
        types.KeyboardButton('–í–∏–¥–∞–ª–∏—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—é'),
        types.KeyboardButton('–ú–æ—ó –≤–∏—Ç—Ä–∞—Ç–∏')
    )
    bot.send_message(chat_id, "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=markup)

def send_welcome(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(
        types.KeyboardButton('–î–æ–¥–∞—Ç–∏'),
        types.KeyboardButton('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'),
        types.KeyboardButton('–ë–∞–ª–∞–Ω—Å'),
        types.KeyboardButton('–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó'),
        types.KeyboardButton('–í–∏–¥–∞–ª–∏—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—é'),
        types.KeyboardButton('–ú–æ—ó –≤–∏—Ç—Ä–∞—Ç–∏')
    )
    bot.send_message(
        message.chat.id,
        "üëã –ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ–±–ª—ñ–∫—É –≤–∏—Ç—Ä–∞—Ç.\n–û–±–µ—Ä–∏ –¥—ñ—é –∫–Ω–æ–ø–∫–æ—é –Ω–∏–∂—á–µ –∞–±–æ –≤–≤–µ–¥–∏ –≤—Ä—É—á–Ω—É.",
        reply_markup=markup
    )

@bot.message_handler(commands=['start'])
def start_handler(message):
    send_welcome(message)

# === –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è (–∑ –ö–∏—ó–≤—Å—å–∫–∏–º —á–∞—Å–æ–º) ===

kyiv_tz = pytz.timezone("Europe/Kyiv")

def reminder_loop():
    while True:
        now_kyiv = datetime.now(kyiv_tz)
        for chat_id, remind_time_str in subscriptions.items():
            try:
                remind_time = datetime.strptime(remind_time_str, "%H:%M").time()
            except:
                continue
            if now_kyiv.time().hour == remind_time.hour and now_kyiv.time().minute == remind_time.minute:
                try:
                    bot.send_message(chat_id, "üîî –ù–µ –∑–∞–±—É–¥—å –≤–Ω–µ—Å—Ç–∏ –≤–∏—Ç—Ä–∞—Ç–∏!")
                except Exception as e:
                    print(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è {chat_id}: {e}")
        time_module.sleep(60)

threading.Thread(target=reminder_loop, daemon=True).start()

@bot.message_handler(commands=['remind'])
def handle_remind(message):
    chat_id = message.chat.id
    args = message.text.split()
    if len(args) == 1:
        bot.send_message(chat_id, "‚ÑπÔ∏è –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:\n/remind on - —É–≤—ñ–º–∫–Ω—É—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –æ 20:00 (–ö–∏—ó–≤)\n/remind off - –≤–∏–º–∫–Ω—É—Ç–∏\n/remind HH:MM - –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ —á–∞—Å –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è")
        return
    param = args[1].lower()

    if param == "on":
        subscriptions[chat_id] = "20:00"
        bot.send_message(chat_id, "‚úÖ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è —É–≤—ñ–º–∫–Ω–µ–Ω–æ –Ω–∞ 20:00 (–∑–∞ –ö–∏—î–≤–æ–º).")
    elif param == "off":
        if chat_id in subscriptions:
            subscriptions.pop(chat_id)
            bot.send_message(chat_id, "‚úÖ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –≤–∏–º–∫–Ω–µ–Ω–æ.")
        else:
            bot.send_message(chat_id, "‚ÑπÔ∏è –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –Ω–µ –±—É–ª–æ —É–≤—ñ–º–∫–Ω–µ–Ω–æ.")
    else:
        try:
            dt = datetime.strptime(param, "%H:%M")
            subscriptions[chat_id] = param
            bot.send_message(chat_id, f"‚úÖ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {param} (–ö–∏—ó–≤).")
        except:
            bot.send_message(chat_id, "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π HH:MM (24-–≥–æ–¥–∏–Ω–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç).")

# === –î–æ–¥–∞—Ç–∏ –≤–∏—Ç—Ä–∞—Ç—É ===
@bot.message_handler(func=lambda m: m.text == '–î–æ–¥–∞—Ç–∏')
def handle_add(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add("‚Ü©Ô∏è –ù–∞–∑–∞–¥")
    bot.send_message(message.chat.id, "üíµ –í–≤–µ–¥–∏ —Å—É–º—É –≤–∏—Ç—Ä–∞—Ç–∏ –∞–±–æ —Å–∫–∞—Å—É–π:", reply_markup=markup)
    user_temp_data[message.chat.id] = {'step': 'awaiting_amount'}

@bot.message_handler(func=lambda m: user_temp_data.get(m.chat.id, {}).get('step') == 'awaiting_amount')
def handle_amount(message):
    if message.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥":
        user_temp_data.pop(message.chat.id, None)
        show_main_menu(message.chat.id)
        return
    try:
        amount = float(message.text)
        user_temp_data[message.chat.id] = {'step': 'awaiting_category', 'amount': amount}
        cats = user_categories.get(message.chat.id, default_categories)
        markup = types.InlineKeyboardMarkup()
        for c in cats:
            markup.add(types.InlineKeyboardButton(c, callback_data=f'category:{c}'))
        markup.add(types.InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='cancel_add'))
        bot.send_message(message.chat.id, "üìÇ –í–∏–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", reply_markup=markup)
    except:
        bot.send_message(message.chat.id, "‚ùå –í–≤–µ–¥–∏ —Å—É–º—É —á–∏—Å–ª–æ–º.")

@bot.callback_query_handler(func=lambda call: call.data.startswith('category:') or call.data == 'cancel_add')
def handle_category_or_cancel(call):
    chat_id = call.message.chat.id
    if call.data == 'cancel_add':
        user_temp_data.pop(chat_id, None)
        bot.edit_message_text("‚ùå –î–æ–¥–∞–≤–∞–Ω–Ω—è –≤–∏—Ç—Ä–∞—Ç–∏ —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", chat_id, call.message.message_id)
        show_main_menu(chat_id)
        bot.answer_callback_query(call.id)
        return

    cat = call.data.split(':')[1]
    data = user_temp_data.pop(chat_id, {})
    amount = data.get('amount')
    if amount is None:
        bot.send_message(chat_id, "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.")
        return
    expenses[chat_id].append({"amount": amount, "category": cat, "date": datetime.now().isoformat()})
    save_data()
    bot.edit_message_text(f"‚úÖ –î–æ–¥–∞–Ω–æ: {amount:.2f} –≥—Ä–Ω –Ω–∞ \"{cat}\"", chat_id, call.message.message_id)
    bot.answer_callback_query(call.id)

# === –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ===
@bot.message_handler(func=lambda m: m.text == '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
def stats(message):
    chat_id = message.chat.id
    if not expenses.get(chat_id):
        bot.send_message(chat_id, "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É—Å—Ç–∞.")
        return
    stat = defaultdict(float)
    for e in expenses[chat_id]:
        stat[e['category']] += e['amount']
    text = "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∏—Ç—Ä–∞—Ç:\n"
    for cat, total in stat.items():
        text += f"‚Ä¢ {cat}: {total:.2f} –≥—Ä–Ω\n"
    bot.send_message(chat_id, text)
    generate_pie_chart(stat, chat_id)

def generate_pie_chart(stat, chat_id):
    fig, ax = plt.subplots()
    ax.pie(stat.values(), labels=stat.keys(), autopct='%1.1f%%')
    ax.axis('equal')
    plt.title("–í–∏—Ç—Ä–∞—Ç–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö")
    path = f"chart_{chat_id}.png"
    plt.savefig(path)
    plt.close()
    with open(path, 'rb') as photo:
        bot.send_photo(chat_id, photo)
    os.remove(path)

# === –ë–∞–ª–∞–Ω—Å ===
@bot.message_handler(func=lambda m: m.text == '–ë–∞–ª–∞–Ω—Å')
def balance(message):
    chat_id = message.chat.id
    total = sum(e['amount'] for e in expenses.get(chat_id, []))
    bot.send_message(chat_id, f"üí∞ –ó–∞–≥–∞–ª—å–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏: {total:.2f} –≥—Ä–Ω")

# === –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó ===
@bot.message_handler(func=lambda m: m.text == '–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó')
def categories(message):
    chat_id = message.chat.id
    cats = user_categories.get(chat_id, default_categories)
    text = "üìÇ –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó:\n" + '\n'.join(f"‚Ä¢ {c}" for c in cats)
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("‚ûï –î–æ–¥–∞—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é", "‚ûñ –í–∏–¥–∞–ª–∏—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é", "‚Ü©Ô∏è –ù–∞–∑–∞–¥")
    bot.send_message(chat_id, text, reply_markup=markup)

@bot.message_handler(func=lambda m: m.text == "‚ûï –î–æ–¥–∞—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é")
def add_cat(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add("‚Ü©Ô∏è –ù–∞–∑–∞–¥")
    bot.send_message(message.chat.id, "‚úèÔ∏è –í–≤–µ–¥–∏ –Ω–æ–≤—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –∞–±–æ —Å–∫–∞—Å—É–π:", reply_markup=markup)
    user_temp_data[message.chat.id] = {'step': 'new_category'}

@bot.message_handler(func=lambda m: user_temp_data.get(m.chat.id, {}).get('step') == 'new_category')
def save_new_cat(message):
    if message.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥":
        user_temp_data.pop(message.chat.id, None)
        show_main_menu(message.chat.id)
        return
    cat = message.text.strip()
    chat_id = message.chat.id
    cats = user_categories.get(chat_id, default_categories.copy())
    if cat in cats:
        bot.send_message(chat_id, "‚ö†Ô∏è –ö–∞—Ç–µ–≥–æ—Ä—ñ—è –≤–∂–µ —ñ—Å–Ω—É—î.")
    else:
        cats.append(cat)
        user_categories[chat_id] = cats
        bot.send_message(chat_id, f"‚úÖ –î–æ–¥–∞–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é: {cat}")
    user_temp_data.pop(chat_id, None)

@bot.message_handler(func=lambda m: m.text == "‚ûñ –í–∏–¥–∞–ª–∏—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é")
def delete_cat_start(message):
    chat_id = message.chat.id
    cats = user_categories.get(chat_id, default_categories.copy())
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for c in cats:
        markup.add(c)
    markup.add("‚Ü©Ô∏è –ù–∞–∑–∞–¥")
    bot.send_message(chat_id, "üóëÔ∏è –í–∏–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∞–±–æ —Å–∫–∞—Å—É–π:", reply_markup=markup)
    user_temp_data[chat_id] = {'step': 'delete_category'}

@bot.message_handler(func=lambda m: user_temp_data.get(m.chat.id, {}).get('step') == 'delete_category')
def delete_cat(message):
    if message.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥":
        user_temp_data.pop(message.chat.id, None)
        show_main_menu(message.chat.id)
        return
    cat = message.text.strip()
    chat_id = message.chat.id
    cats = user_categories.get(chat_id, default_categories.copy())
    if cat in cats:
        cats.remove(cat)
        user_categories[chat_id] = cats
        bot.send_message(chat_id, f"üóëÔ∏è –ö–∞—Ç–µ–≥–æ—Ä—ñ—é {cat} –≤–∏–¥–∞–ª–µ–Ω–æ")
    else:
        bot.send_message(chat_id, "‚ö†Ô∏è –ö–∞—Ç–µ–≥–æ—Ä—ñ—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
    user_temp_data.pop(chat_id, None)

@bot.message_handler(func=lambda m: m.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥")
def go_back(message):
    user_temp_data.pop(message.chat.id, None)
    show_main_menu(message.chat.id)

# === –í–∏–¥–∞–ª–∏—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—é –≤–∏—Ç—Ä–∞—Ç—É ===
@bot.message_handler(func=lambda m: m.text == '–í–∏–¥–∞–ª–∏—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—é')
def delete_last(message):
    chat_id = message.chat.id
    if expenses.get(chat_id):
        last = expenses[chat_id].pop()
        save_data()
        bot.send_message(chat_id, f"‚ùå –í–∏–¥–∞–ª–µ–Ω–æ: {last['amount']} –≥—Ä–Ω –Ω–∞ {last['category']}")
    else:
        bot.send_message(chat_id, "‚ö†Ô∏è –ù–µ–º–∞—î –≤–∏—Ç—Ä–∞—Ç –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è")

# === –ú–æ—ó –≤–∏—Ç—Ä–∞—Ç–∏ ===
@bot.message_handler(func=lambda m: m.text == '–ú–æ—ó –≤–∏—Ç—Ä–∞—Ç–∏')
def show_expense_history(message):
    chat_id = message.chat.id
    user_expenses = expenses.get(chat_id, [])

    if not user_expenses:
        bot.send_message(chat_id, "üì≠ –£ –≤–∞—Å –ø–æ–∫–∏ –Ω–µ–º–∞—î –≤–∏—Ç—Ä–∞—Ç.")
        return

    last_5 = user_expenses[-5:]
    start_idx = len(user_expenses) - len(last_5)

    for i, exp in enumerate(last_5, start=start_idx):
        text = f"{i+1}. üí∏ {exp['amount']} –≥—Ä–Ω ‚Äî {exp['category']}\nüïì {exp['date'][:16]}"
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏", callback_data=f"edit:{i}"),
            types.InlineKeyboardButton("üóë –í–∏–¥–∞–ª–∏—Ç–∏", callback_data=f"delete:{i}")
        )
        bot.send_message(chat_id, text, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith(('edit:', 'delete:')))
def handle_edit_or_delete(call):
    chat_id = call.message.chat.id
    data = call.data
    action, idx_str = data.split(":")
    idx = int(idx_str)

    if chat_id not in expenses:
        bot.answer_callback_query(call.id, "‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    try:
        exp = expenses[chat_id][idx]
    except IndexError:
        bot.answer_callback_query(call.id, "‚ö†Ô∏è –í–∏—Ç—Ä–∞—Ç—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    if action == "delete":
        deleted = expenses[chat_id].pop(idx)
        save_data()
        bot.edit_message_text(
            f"üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ: {deleted['amount']} –≥—Ä–Ω ‚Äî {deleted['category']}",
            chat_id, call.message.message_id
        )
        bot.answer_callback_query(call.id, "–í–∏—Ç—Ä–∞—Ç—É –≤–∏–¥–∞–ª–µ–Ω–æ")

    elif action == "edit":
        user_temp_data[chat_id] = {'step': 'edit_amount', 'idx': idx}
        bot.send_message(chat_id, f"‚úèÔ∏è –í–≤–µ–¥–∏ –Ω–æ–≤—É —Å—É–º—É –¥–ª—è {exp['category']} (–±—É–ª–æ {exp['amount']} –≥—Ä–Ω):")
        bot.answer_callback_query(call.id)

@bot.message_handler(func=lambda m: user_temp_data.get(m.chat.id, {}).get('step') == 'edit_amount')
def update_expense_amount(message):
    chat_id = message.chat.id
    try:
        new_amount = float(message.text)
        idx = user_temp_data[chat_id]['idx']
        expenses[chat_id][idx]['amount'] = new_amount
        save_data()
        bot.send_message(chat_id, f"‚úÖ –°—É–º—É –æ–Ω–æ–≤–ª–µ–Ω–æ: {new_amount:.2f} –≥—Ä–Ω")
    except ValueError:
        bot.send_message(chat_id, "‚ùå –í–≤–µ–¥–∏ —á–∏—Å–ª–æ.")
    finally:
        user_temp_data.pop(chat_id, None)

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ")
bot.polling(none_stop=True)